function assign(e){function t(){const t=window.getComputedStyle(e,null);"vertical"===t.resize?e.style.resize="none":"both"===t.resize&&(e.style.resize="horizontal"),s="content-box"===t.boxSizing?-(parseFloat(t.paddingTop)+parseFloat(t.paddingBottom)):parseFloat(t.borderTopWidth)+parseFloat(t.borderBottomWidth),isNaN(s)&&(s=0),i()}function o(t){{const t=e.style.width;e.style.width="0px",e.offsetWidth,e.style.width=t}e.style.overflowY=t}function n(e){const t=[];for(;e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}function r(){if(0===e.scrollHeight)return;const t=n(e),o=document.documentElement&&document.documentElement.scrollTop;e.style.height="",e.style.height=e.scrollHeight+s+"px",l=e.clientWidth,t.forEach(e=>{e.node.scrollTop=e.scrollTop}),o&&(document.documentElement.scrollTop=o)}function i(){r();const t=Math.round(parseFloat(e.style.height)),n=window.getComputedStyle(e,null);var i="content-box"===n.boxSizing?Math.round(parseFloat(n.height)):e.offsetHeight;if(i<t?"hidden"===n.overflowY&&(o("scroll"),r(),i="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):"hidden"!==n.overflowY&&(o("hidden"),r(),i="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),d!==i){d=i;const t=createEvent("autosize:resized");try{e.dispatchEvent(t)}catch(s){}}}if(!e||!e.nodeName||"TEXTAREA"!==e.nodeName||map.has(e))return;let s=null,l=null,d=null;const a=()=>{e.clientWidth!==l&&i()},p=(t=>{window.removeEventListener("resize",a,!1),e.removeEventListener("input",i,!1),e.removeEventListener("keyup",i,!1),e.removeEventListener("autosize:destroy",p,!1),e.removeEventListener("autosize:update",i,!1),Object.keys(t).forEach(o=>{e.style[o]=t[o]}),map["delete"](e)}).bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener("autosize:destroy",p,!1),"onpropertychange"in e&&"oninput"in e&&e.addEventListener("keyup",i,!1),window.addEventListener("resize",a,!1),e.addEventListener("input",i,!1),e.addEventListener("autosize:update",i,!1),e.style.overflowX="hidden",e.style.wordWrap="break-word",map.set(e,{destroy:p,update:i}),t()}function destroy(e){const t=map.get(e);t&&t.destroy()}function update(e){const t=map.get(e);t&&t.update()}const map="function"==typeof Map?new Map:function(){const e=[],t=[];return{has:t=>e.indexOf(t)>-1,get:o=>t[e.indexOf(o)],set(o,n){-1===e.indexOf(o)&&(e.push(o),t.push(n))},"delete"(o){const n=e.indexOf(o);n>-1&&(e.splice(n,1),t.splice(n,1))}}}();let createEvent=e=>new Event(e,{bubbles:!0});try{new Event("test")}catch(e){createEvent=(e=>{const t=document.createEvent("Event");return t.initEvent(e,!0,!1),t})}let autosize=null;"undefined"==typeof window||"function"!=typeof window.getComputedStyle?((autosize=(e=>e)).destroy=(e=>e),autosize.update=(e=>e)):((autosize=((e,t)=>(e&&Array.prototype.forEach.call(e.length?e:[e],e=>assign(e,t)),e))).destroy=(e=>(e&&Array.prototype.forEach.call(e.length?e:[e],destroy),e)),autosize.update=(e=>(e&&Array.prototype.forEach.call(e.length?e:[e],update),e)));export default autosize;